{"files":[{"id":"8309d52e-12c8-46a2-82f2-0c2b55e550e8","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Singapore\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Sheets\",\n        \"version\": \"v4\",\n        \"serviceId\": \"sheets\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"5df8a5a1-98ef-4b4e-8676-5d7409492e49","name":"test","type":"server_js","source":"const geminiAiApiKey \u003d \u0027AIzaSyBD0WY8v75ghXTk6CaDfIg44rmLEdE4WE4\u0027;\nconst googleCloudProjectId \u003d \u0027dogwood-keep-430614-f1\u0027;\nconst docsID \u003d \u00271Z697fMTuKzOtvwJx3NFFHP4sLq7MrifjMZeurQS0Tm4\u0027;\n\n// Function to transcribe audio using Google Cloud Speech-to-Text\nfunction transcribeAudio(fileId) {\n  try {\n    Logger.log(\u0027Attempting to get file by ID: \u0027 + fileId);\n    const file \u003d DriveApp.getFileById(fileId);\n    Logger.log(\u0027File obtained successfully: \u0027 + file.getName());\n    \n    const blob \u003d file.getBlob();\n    const audio \u003d Utilities.base64Encode(blob.getBytes());\n    \n    const requestPayload \u003d {\n      \"config\": {\n        \"encoding\": \"MP3\",\n        \"sampleRateHertz\": 16000,\n        \"languageCode\": \"en-US\"\n      },\n      \"audio\": {\n        \"content\": audio\n      }\n    };\n\n    const options \u003d {\n      \"method\": \"post\",\n      \"contentType\": \"application/json\",\n      \"payload\": JSON.stringify(requestPayload),\n    };\n\n    const url \u003d \u0027https://speech.googleapis.com/v1/speech:recognize?key\u003dAIzaSyBLi6DmuYYTMt9nvhdlV3DLiQg31cISeO8\u0027;\n    const response \u003d UrlFetchApp.fetch(url, options);\n    const responseData \u003d JSON.parse(response.getContentText());\n    Logger.log(\u0027Speech-to-Text API response: \u0027 + JSON.stringify(responseData));\n\n    if (responseData.results \u0026\u0026 responseData.results.length \u003e 0) {\n      return responseData.results.map(result \u003d\u003e result.alternatives[0].transcript).join(\u0027\\n\u0027);\n    } else {\n      Logger.log(\u0027No transcription results found.\u0027);\n      return null;\n    }\n  } catch (error) {\n    Logger.log(\u0027Error during transcription: \u0027 + error.message);\n    return null;\n  }\n}\n\nfunction generateContentWithGemini(text) {\n  const url \u003d \u0027https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key\u003dAIzaSyBD0WY8v75ghXTk6CaDfIg44rmLEdE4WE4\u0027;\n\n  const payload \u003d {\n    \"contents\": [\n      {\n        \"role\": \"user\",\n        \"parts\": [\n          {\n            \"text\": \u0027Analyze the following customer call transcript:\\n\\n\u0027 + text\n          }\n        ]\n      }\n    ]\n  };\n\n  const options \u003d {\n    \"method\": \"post\",\n    \"contentType\": \"application/json\",\n    \"payload\": JSON.stringify(payload)\n  };\n\n  \n  const response \u003d UrlFetchApp.fetch(url, options);\n  const json \u003d JSON.parse(response);\n  return json.candidates[0].content.parts[0].text;\n}\n\nfunction appendTextToGoogleDoc(docId, textToAppend) {\n  // Open the Google Doc by its ID\n  var doc \u003d DocumentApp.openById(docId);\n\n  // Get the body of the document\n  var body \u003d doc.getBody();\n\n  // Append the text to the document body\n  body.appendParagraph(textToAppend);\n\n  Logger.log(\u0027Text appended successfully.\u0027);\n}\n\n// Main function to transcribe and analyze the call\nfunction myFunction() {\n  const fileId \u003d \u00271Xn6jp9QJoeStR0dQcU5bxa9QbnFxkuIl\u0027;\n  Logger.log(\u0027File ID: \u0027 + fileId);\n\n  var transcript \u003d transcribeAudio(fileId);\n  if (transcript) {\n    const analysis \u003d \"\\n\" + generateContentWithGemini(transcript); \n    appendTextToGoogleDoc(docsID, analysis);\n  } else {\n    Logger.log(\u0027Transcription failed.\u0027);\n  }\n}\n\nmyFunction();\n\n"}]}